// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/aerosystems/stat-service/internal/config"
	"github.com/aerosystems/stat-service/internal/infrastructure/http"
	"github.com/aerosystems/stat-service/internal/infrastructure/http/handlers"
	"github.com/aerosystems/stat-service/internal/repository/elastic"
	"github.com/aerosystems/stat-service/internal/repository/rpc"
	"github.com/aerosystems/stat-service/internal/usecases"
	"github.com/aerosystems/stat-service/pkg/elastic_client"
	"github.com/aerosystems/stat-service/pkg/logger"
	"github.com/aerosystems/stat-service/pkg/rpc_client"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	baseHandler := ProvideBaseHandler(logrusLogger, config)
	client := ProvideElasticClient(config)
	eventRepo := ProvideEventRepo(client)
	reconnectRpcClient := ProvideRpcClient(config)
	projectRepo := ProvideProjectRepo(reconnectRpcClient)
	eventUsecase := ProvideEventUsecase(eventRepo, projectRepo)
	eventHandler := ProvideEventHandler(baseHandler, eventUsecase)
	server := ProvideHttpServer(logrusLogger, config, eventHandler)
	app := ProvideApp(logrusLogger, config, server)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *config.Config {
	configConfig := config.NewConfig()
	return configConfig
}

func ProvideEventHandler(baseHandler *handlers.BaseHandler, eventUsecase handlers.EventUsecase) *handlers.EventHandler {
	eventHandler := handlers.NewEventHandler(baseHandler, eventUsecase)
	return eventHandler
}

func ProvideEventUsecase(eventRepo usecases.EventRepository, projectRepo usecases.ProjectRepository) *usecases.EventUsecase {
	eventUsecase := usecases.NewEventUsecase(projectRepo, eventRepo)
	return eventUsecase
}

func ProvideEventRepo(es *elasticsearch.Client) *elastic.EventRepo {
	eventRepo := elastic.NewEventRepo(es)
	return eventRepo
}

func ProvideProjectRepo(rpcClient *RpcClient.ReconnectRpcClient) *rpc.ProjectRepo {
	projectRepo := rpc.NewProjectRepo(rpcClient)
	return projectRepo
}

// wire.go:

func ProvideApp(log *logrus.Logger, cfg *config.Config, httpServer *HttpServer.Server) *App {
	return NewApp(log, cfg, httpServer)
}

func ProvideHttpServer(log *logrus.Logger, cfg *config.Config, eventHandler *handlers.EventHandler) *HttpServer.Server {
	return HttpServer.NewServer(log, cfg.AccessSecret, eventHandler)
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideBaseHandler(log *logrus.Logger, cfg *config.Config) *handlers.BaseHandler {
	return handlers.NewBaseHandler(log, cfg.Mode)
}

func ProvideRpcClient(cfg *config.Config) *RpcClient.ReconnectRpcClient {
	return RpcClient.NewClient("tcp", cfg.ProjectServiceRpcAddress)
}

func ProvideElasticClient(cfg *config.Config) *elasticsearch.Client {
	return ElasticClient.NewClient(cfg.ElasticHost, cfg.ElasticPassword, cfg.ElasticCrtPath)
}
